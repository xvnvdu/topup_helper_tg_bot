import web3
from web3 import Web3
from typing import Any
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery

from logger import logger
from config import bot_wallet_pk as pk, bot_wallet_address as adr
from bot.main_bot import id_generator, save_data, save_payments, save_total, users_data_dict, total_values, users_payments_dict
from bot.bot_buttons import successful_wallet_fund, try_again_crypto_amount_keyboard, confirm_fund_wallet, back_to_chain_keyboard

from .models import Networks
from .price_parser import return_eth_price, return_matic_price, return_usd_price
from .main_crypto import (pending_chain_fund, pending_crypto_fund_amount, pending_fund_info, 
                          pending_rub_amount, ok_to_fund, pending_fund_trx_id, get_time)


async def fund(message: Message, state: FSMContext):
    user_id = message.from_user.id
    user_amount = message.text.replace(',', '.')
    
    await message.delete()

    user_data = users_data_dict[user_id]
    balance = user_data['Balance']
    chain = pending_chain_fund[user_id]
    native = Networks.networks[chain].coin_symbol
    
    usd_price = await return_usd_price()
    currency_price = round(((await return_matic_price() * usd_price if chain == 'Polygon' 
                      else await return_eth_price() * usd_price) * 1.05), 2)
        
    try:
        amount = float(user_amount)
        amount = int(amount)
        if amount <= 0:
            logger.warning(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤–≤–µ–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É –ø—Ä–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫—Ä–∏–ø—Ç–æ–∫–æ—à–µ–ª—å–∫–∞: {amount}.')
            
            await message.answer('<strong>‚ö†Ô∏è –°—É–º–º–∞ –≤–≤–µ–¥–µ–Ω–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.</strong>\n<i>–ù–µ–ª—å–∑—è –ø–æ–ø–æ–ª–Ω–∏—Ç—å –∫–æ—à–µ–ª–µ–∫ –Ω–∞ '
                                 '—Å—É–º–º—É –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—É—é –∏–ª–∏ —Ä–∞–≤–Ω—É—é –Ω—É–ª—é.</i>', parse_mode='HTML',
                                 reply_markup=try_again_crypto_amount_keyboard(chain))
        elif int(balance) < amount:
            logger.warning(f'–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –∫—Ä–∏–ø—Ç–æ–∫–æ—à–µ–ª—å–∫–∞: {balance} - {amount}.')
            
            await message.answer('<strong>‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è.</strong>\n<i>–£–º–µ–Ω—å—à–∏—Ç–µ —Å—É–º–º—É '
                                 '–∏–ª–∏ –ø–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å.</i>', parse_mode='HTML', reply_markup=try_again_crypto_amount_keyboard(chain))
        else:
            user_recieve = f'{(amount / currency_price):.7f}'
            pending_crypto_fund_amount[user_id] = user_recieve
            pending_rub_amount[user_id] = amount
            trx_id = await id_generator()
            pending_fund_trx_id[user_id] = trx_id
            
            ok_to_fund[user_id] = True
            
            logger.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∫—Ä–∏–ø—Ç–æ–∫–æ—à–µ–ª—å–∫–∞ –Ω–∞ {user_recieve} {native}.')
            await message.answer(f'<strong>üåê –ü–æ–ø–æ–ª–Ω—è–µ–º–∞—è —Å–µ—Ç—å: <code>{chain}</code>\nüí≥ –°—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: <code>{amount}‚ÇΩ</code>\n\n'
                                 f'üìä –ö—É—Ä—Å: <code>1 {native} = {currency_price}‚ÇΩ</code>\n–ò—Ç–æ–≥–æ –∫ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—é: <code>{user_recieve} {native}</code>\n\n'
                                 f'–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ?</strong>', parse_mode='HTML', reply_markup=confirm_fund_wallet(chain, trx_id))
    except ValueError:
        logger.warning(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤–≤–µ–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É –ø—Ä–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫—Ä–∏–ø—Ç–æ–∫–æ—à–µ–ª—å–∫–∞.')
        await message.answer('<strong>‚ö†Ô∏è –°—É–º–º–∞ –≤–≤–µ–¥–µ–Ω–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.</strong>', 
                             parse_mode='HTML', reply_markup=try_again_crypto_amount_keyboard(chain))
    await state.clear()


async def wallet_funding_confirmed(call: CallbackQuery) -> Any:
    user_id = call.from_user.id
    user_data = users_data_dict[user_id]
    user_payments = users_payments_dict[user_id]['Transactions']
    
    amount_rub = pending_rub_amount[user_id]
    amount_crypto = pending_crypto_fund_amount[user_id]
    chain = pending_chain_fund[user_id]
    explorer = Networks.networks[chain].explorer
    exp_link = Networks.networks[chain].explorer_link
    
    native = Networks.networks[chain].coin_symbol

    try:
        trx_hash = await send_crypto(call, chain=chain)
    except web3.exceptions.Web3RPCError:
        connected = True
        trx_hash = False
        
        logger.critical(f'–ù–∞ –∫–æ—à–µ–ª—å–∫–µ-—Ö—Ä–∞–Ω–∏–ª–∏—â–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è. –°–µ—Ç—å - {chain} | –°—É–º–º–∞ - {amount_crypto} {native}.')
        await call.message.edit_text('‚ö†Ô∏è <strong>–û—à–∏–±–∫–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è. –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤.</strong>\n'
                                        '<i>–ù–∞ –∫–æ—à–µ–ª—å–∫–µ, —Å –∫–æ—Ç–æ—Ä–æ–≥–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤—ã–≤–æ–¥, –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –≤ '
                                        '–≤—ã–±—Ä–∞–Ω–Ω–æ–π –≤–∞–º–∏ —Å–µ—Ç–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É–º–µ–Ω—å—à–∏—Ç—å —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è, –ª–∏–±–æ '
                                        '–æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.</i>', parse_mode='HTML', reply_markup=back_to_chain_keyboard(chain))
    
    if trx_hash:
        connected = True
        pending_fund_info[user_id] = (f' –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ <a href="{exp_link}/tx/{trx_hash}">{chain}</a> '
                                        f'‚Äî <code>{amount_crypto} {native}</code>')
        trx_info = pending_fund_info[user_id]
        trx_id = pending_fund_trx_id[user_id]
        total_values['Total_transactions_count'] += 1
        trx_num = total_values['Total_transactions_count']
        user_data['Balance'] -= amount_rub

        await save_total()
        await save_data()

        today, time_now = await get_time()
        if today not in user_payments:
            user_payments[today] = {time_now: {'RUB': amount_rub,
                                               'USD': 0,
                                               'transaction_num': trx_num,
                                               'type': trx_info,
                                               'trx_id': trx_id}}
            await save_payments()
        else:
            user_payments[today][time_now] = {'RUB': amount_rub,
                                              'USD': 0,
                                              'transaction_num': trx_num,
                                              'type': trx_info,
                                              'trx_id': trx_id}
            await save_payments()

        logger.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É—Å–ø–µ—à–Ω–æ –ø–æ–ø–æ–ª–Ω–∏–ª –∫—Ä–∏–ø—Ç–æ–∫–æ—à–µ–ª–µ–∫. –°–µ—Ç—å - {chain} | –°—É–º–º–∞ - {amount_crypto} {native}')
        await call.message.edit_text(f'üéâ <strong>–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω–∞!</strong>\n'
                                        f'<i>–û–∂–∏–¥–∞–π—Ç–µ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤.</i>\n\n'
                                        f'<strong>–•—ç—à: <pre>{trx_hash}</pre></strong>',
                                        parse_mode='HTML', reply_markup=successful_wallet_fund(exp_link, explorer, trx_hash), 
                                        disable_web_page_preview=True)
    if not connected:
        logger.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id}. –°–µ—Ç—å - {chain} | –°—É–º–º–∞ - {amount_crypto} {native}')
        await  call.message.edit_text('‚õîÔ∏è <strong>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏!\n'
                                        '<i>–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ.</i></strong>', parse_mode='HTML')

    try:     
        del pending_rub_amount[user_id], pending_chain_fund[user_id], pending_crypto_fund_amount[user_id], pending_fund_info[user_id]
        ok_to_fund[user_id] = False
    except KeyError:
        pass


async def try_to_fund(call: CallbackQuery):
    user_id = call.from_user.id
    
    if ok_to_fund[user_id]:
        if f'{call.data}'.split('_')[3] == pending_fund_trx_id[user_id]:
            await wallet_funding_confirmed(call)
        else:
            await wallet_funding_declined(call)
    else:
        await wallet_funding_declined(call)


async def wallet_funding_declined(call: CallbackQuery):
     user_id = call.from_user.id
    
     logger.warning(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è —É—Å—Ç–∞—Ä–µ–≤—à–µ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–µ–π –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è.')
     await  call.message.edit_text('‚õîÔ∏è <strong>–î–∞–Ω–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —É—Å—Ç–∞—Ä–µ–ª–∏!</strong>\n'
                                          '<i>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—É—é.</i>', parse_mode='HTML')


async def send_crypto(call: CallbackQuery, chain) -> Any:
    user_id = call.from_user.id
    user_data = users_data_dict[user_id]

    rpc = Networks.networks[chain].rpc
    web3 = Web3(Web3.HTTPProvider(rpc))

    if not web3.is_connected():
        today, time_now = await get_time()
        logger.error(f'–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ç–∏ {chain}. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id}. RPC: {rpc}')
        raise Exception(f'{today} | {time_now} –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ç–∏ {chain}. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id}')

    else:
        amount_crypto = pending_crypto_fund_amount[user_id]
        chain = pending_chain_fund[user_id]
    
        sender_adrress = adr
        sender_pk = pk

        recipient_address = user_data['Wallet_address']
        gas_price_wei = web3.eth.gas_price
        max_priority_fee = web3.eth.max_priority_fee

        tx = {
            'nonce': web3.eth.get_transaction_count(sender_adrress),
            'to': recipient_address,
            'value': web3.to_wei(amount_crypto, 'ether'),
            'maxFeePerGas': gas_price_wei,
            'maxPriorityFeePerGas': max_priority_fee,
            'chainId': web3.eth.chain_id
        }

        estimated_gas = web3.eth.estimate_gas(tx)
        tx['gas'] = estimated_gas
        
        signed = web3.eth.account.sign_transaction(tx, sender_pk)

        tx_hash = web3.eth.send_raw_transaction(signed.raw_transaction)
        
        hash_hex = web3.to_hex(tx_hash)
        return hash_hex
    