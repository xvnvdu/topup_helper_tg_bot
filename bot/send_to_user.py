from aiogram import Bot, Router
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from aiogram.handlers import CallbackQueryHandler

from logger import logger
from .main_bot import SendToFriend
from .bot_buttons import (try_again_amount_keyboard, step_back_keyboard, try_again_id_keyboard, 
                          skip_message_keyboard, confirm_sending_keyboard, try_again_message_keyboard)
from .main_bot import (id_generator, total_values, save_total, save_data, save_payments, 
                       users_payments_dict, users_data_dict, pending_sending_amount, pending_sending_id, 
                       pending_recieving_info, pending_sending_info, pending_sending_message, get_time)


router = Router()


async def amount_input(message: Message, state: FSMContext):
    user_id = message.from_user.id
    user_amount = message.text.replace(',', '.')
    user_data = users_data_dict[user_id]
    balance = user_data['Balance']
    
    logger.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤–≤–æ–¥–∏—Ç —Å—É–º–º—É –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –±–∞–ª–∞–Ω—Å–∞.')
    
    try:
        amount = float(user_amount)
        amount = int(amount)
        await message.delete()
        if amount <= 0:
            await message.answer('<strong>‚ö†Ô∏è –°—É–º–º–∞ –≤–≤–µ–¥–µ–Ω–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.</strong>\n<i>–ù–µ–ª—å–∑—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—É–º–º—É '
                                 '–º–µ–Ω—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω—É—é –Ω—É–ª—é.</i>', parse_mode='HTML', reply_markup=try_again_amount_keyboard)
            await state.clear()
        elif int(balance) < amount:
            await message.answer('<strong>‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞.</strong>\n<i>–£–º–µ–Ω—å—à–∏—Ç–µ —Å—É–º–º—É '
                                 '–∏–ª–∏ –ø–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å.</i>', parse_mode='HTML', reply_markup=try_again_amount_keyboard)
            await state.clear()
        else:
            pending_sending_amount[user_id] = amount
            await message.answer('<strong>üë§ –í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞.</strong>\n\n<i>–í–∞–º –Ω—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ '
                                 'ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —á–∏—Å–ª–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ –Ω–∏–∂–µ:</i>', parse_mode='HTML',
                                 reply_markup=step_back_keyboard)
            await state.set_state(SendToFriend.id_input)

    except ValueError:
        await message.delete()
        await message.answer('<strong>‚ö†Ô∏è –°—É–º–º–∞ –≤–≤–µ–¥–µ–Ω–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.</strong>',
                             parse_mode='HTML', reply_markup=try_again_amount_keyboard)
        await state.clear()


async def id_input(message: Message, state: FSMContext):
    user_id = message.from_user.id
    user_input = message.text

    logger.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤–≤–æ–¥–∏—Ç ID –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –±–∞–ª–∞–Ω—Å–∞.')

    try:
        send_to = int(user_input)
        await message.delete()
        if send_to == user_id:
            await message.answer(
                '<strong>‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —Å–æ–≤–µ—Ä—à–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥ —Å–∞–º–æ–º—É —Å–µ–±–µ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.</strong>',
                parse_mode='HTML', reply_markup=try_again_id_keyboard)
            await state.clear()
        elif send_to not in users_data_dict:
            await message.answer(
                '<strong>‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.</strong>\n\n<i>–ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ '
                '–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å ID.</i>', parse_mode='HTML', reply_markup=try_again_id_keyboard)
            await state.clear()
        elif not users_data_dict[send_to]['Is_verified']:
            await message.answer('<strong>‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω.</strong>\n\n<i>–í—ã –º–æ–∂–µ—Ç–µ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ –ø–æ–ø—Ä–æ—Å–∏—Ç—å '
                '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–æ–π—Ç–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é.</i>', parse_mode='HTML', reply_markup=try_again_id_keyboard)
            await state.clear()
        else:
            pending_sending_id[user_id] = send_to
            await state.set_state(SendToFriend.message_input)
            await message.answer(f'üì© <strong>–í—ã –º–æ–∂–µ—Ç–µ –≤–≤–µ—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.'
                                 f'</strong>\n<i>–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–µ–Ω–∏–µ, —á—Ç–æ –ª—é–±—ã–µ –ø—Ä–µ–º–∏—É–º-—ç–º–æ–¥–∑–∏, –∫ —Å–æ–∂–∞–ª–µ–Ω–∏—é, –±—É–¥—É—Ç '
                                 f'–ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω—ã –≤ –æ–±—ã—á–Ω—ã–µ.</i>\n\n<i>–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∏–∂–µ:</i>',
                                 parse_mode='HTML', reply_markup=skip_message_keyboard)
    except ValueError:
        await message.delete()
        await message.answer('<strong>‚ö†Ô∏è ID –≤–≤–µ–¥–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.</strong>',
                             parse_mode='HTML', reply_markup=try_again_id_keyboard)
        await state.clear()


async def message_input(message: Message, state: FSMContext):
    user_id = message.from_user.id
    user_input = message.text

    logger.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–∞ –±–∞–ª–∞–Ω—Å–∞.')

    if user_input is not None:
        try:
            send_message = str(user_input)
            pending_sending_message[user_id] = send_message
            await message.delete()
            await message.answer(f'<strong>–í—ã –ø–µ—Ä–µ–≤–æ–¥–∏—Ç–µ: <code>{pending_sending_amount[user_id]}‚ÇΩ</code>\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é '
                                f'–ø–æ–¥ ID: <code>{pending_sending_id[user_id]}</code>\n–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:</strong> '
                                f'{pending_sending_message[user_id]}\n\n<strong>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ?</strong>',
                                parse_mode='HTML', reply_markup=confirm_sending_keyboard)
            
        except:
            await message.answer('<strong>‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!</strong>', parse_mode='HTML',
                                reply_markup=try_again_message_keyboard)
            await state.clear()
    else:
        await message.delete()
        await message.answer('<strong>‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!</strong>', parse_mode='HTML',
                                reply_markup=try_again_message_keyboard)
        await state.clear()
    await state.clear()


@router.message()
async def send_to_user(call: CallbackQueryHandler, bot: Bot, state: FSMContext):
    user_id = call.from_user.id
    user_data = users_data_dict[user_id]
    
    reciever_id = pending_sending_id[user_id]
    reciever_data = users_data_dict[reciever_id]
    
    user_data['Balance'] = int(user_data['Balance'])
    reciever_data['Balance'] = int(reciever_data['Balance'])

    amount = pending_sending_amount[user_id]
    amount = int(amount)

    pending_sending_info[user_id] = f' –ü–µ—Ä–µ–≤–æ–¥ –±–∞–ª–∞–Ω—Å–∞ ‚Äî ID: <code>{reciever_id}</code>'
    pending_recieving_info[reciever_id] = f' –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ ‚Äî ID: <code>{user_id}</code>'
    sender_info = pending_sending_info[user_id]
    reciever_info = pending_recieving_info[reciever_id]

    sender_payments = users_payments_dict[user_id]['Transactions']
    reciever_payments = users_payments_dict[reciever_id]['Transactions']

    if call.from_user.id in pending_sending_amount:
        trx_sender_id = await id_generator()
        trx_reciever_id = await id_generator()
        total_values['Total_transactions_count'] += 1
        trx_num = total_values['Total_transactions_count']
        user_data['Balance'] -= amount
        reciever_data['Balance'] += amount

        await save_total()
        await save_data()

        today, time_now = await get_time()
        if today not in sender_payments:
            sender_payments[today] = {time_now: {'RUB': amount,
                                                 'USD': 0,
                                                 'transaction_num': trx_num,
                                                 'type': sender_info, 'trx_id': trx_sender_id}}
            await save_payments()
        else:
            sender_payments[today][time_now] = {'RUB': amount,
                                                'USD': 0,
                                                'transaction_num': trx_num,
                                                'type': sender_info, 'trx_id': trx_sender_id}
            await save_payments()
        if today not in reciever_payments:
            reciever_payments[today] = {time_now: {'RUB': amount,
                                                   'USD': 0,
                                                   'transaction_num': trx_num,
                                                   'type': reciever_info, 'trx_id': trx_reciever_id}}
            await save_payments()
        else:
            reciever_payments[today][time_now] = {'RUB': amount,
                                                  'USD': 0,
                                                  'transaction_num': trx_num,
                                                  'type': reciever_info, 'trx_id': trx_reciever_id}
            await save_payments()

        if pending_sending_message[user_id] is not None:
            await bot.send_message(chat_id=reciever_id,
                                   text=f'<strong>üéâ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –æ—Ç –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!</strong>\n\n'
                                        f'<i>ü•∑ –ü–µ—Ä–µ–≤–æ–¥ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–¥ ID: <code>{user_id}</code>\nüí∞ –°—É–º–º–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: '
                                        f'<code>{amount}‚ÇΩ</code>\nüì® –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</i>\n\n{pending_sending_message[user_id]}',
                                   parse_mode='HTML')
        else:
            await bot.send_message(chat_id=reciever_id,
                                   text=f'<strong>üéâ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –æ—Ç –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!</strong>\n\n'
                                        f'<i>ü•∑ –ü–µ—Ä–µ–≤–æ–¥ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–¥ ID: <code>{user_id}</code>\nüí∞ –°—É–º–º–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: '
                                        f'<code>{amount}‚ÇΩ</code></i>', parse_mode='HTML')

    logger.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É—Å–ø–µ—à–Ω–æ —Å–æ–≤–µ—Ä—à–∏–ª –ø–µ—Ä–µ–≤–æ–¥ –¥–ª—è {reciever_id}.')
    logger.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {reciever_id} –ø–æ–ª—É—á–∏–ª –ø–µ—Ä–µ–≤–æ–¥ –æ—Ç {user_id}.')

    del (pending_sending_amount[user_id], pending_sending_message[user_id], pending_sending_id[user_id],
         pending_sending_info[user_id], pending_recieving_info[reciever_id])
