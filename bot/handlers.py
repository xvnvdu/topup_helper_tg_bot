import time
from logger import logger
from datetime import datetime
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.handlers import CallbackQueryHandler
from aiogram import F, Router, types, Bot
from aiogram.types import Message, KeyboardButton, ReplyKeyboardMarkup, PreCheckoutQuery, CallbackQuery

from crypto.fund_wallet import fund
from crypto.wallet_page_maker import main_page
from crypto.withdraw_wallet import address_input, buttons_withdraw_handler, withdraw_choice, amount_to_withdraw
from crypto.main_crypto import create_new_wallet, CryptoPayments, pending_chain_fund, ok_to_fund, ok_to_withdraw

from .callbacks import main_callbacks
from .payments import rub_custom, stars_custom
from .send_to_user import amount_input, id_input, message_input
from .main_bot import (users_data, users_payments, users_data_dict, users_payments_dict,
                  save_data, save_payments, total_values, save_total, id_generator, CustomPaymentState, 
                  SendToFriend, pending_payments, pending_payments_info, get_time)
from .bot_buttons import (menu_keyboard, account_keyboard, payment_keyboard, crypto_keyboard, withdraw_crypto, back_to_chain_keyboard)


router = Router()


@router.message(Command('menu'))
async def command_menu(message: Message):
    user_id = message.from_user.id
    user_data = users_data_dict[user_id]
    
    logger.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è –∫–æ–º–∞–Ω–¥–æ–π /menu.')
    
    if user_data['Is_verified']:
        await message.answer( '<strong>–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:</strong>',
                         parse_mode='HTML', reply_markup=menu_keyboard)
    else:
        await confirm_phone(message)


@router.message(Command('account'))
async def command_account(message: Message):
    user_id = message.from_user.id
    user_data = users_data_dict[user_id]

    logger.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è –∫–æ–º–∞–Ω–¥–æ–π /account.')
    
    phone = int(user_data['Phone']) // 10**4
    balance = user_data['Balance']
    registration_date = user_data['Registration']
    volume = user_data['Funding_volume']
    
    days_count = (datetime.now() - datetime.strptime(registration_date, '%d.%m.%Y')).days
    if days_count % 10 == 1 and days_count % 100 != 11:
        days = '–¥–µ–Ω—å'
    elif days_count % 10 in [2, 3, 4] and not (11 <= days_count % 100 <= 19):
        days = '–¥–Ω—è'
    else:
        days = '–¥–Ω–µ–π'
        
    if user_data['Is_verified']:
        await message.answer(f'<strong>–ú–æ–π –∞–∫–∫–∞—É–Ω—Ç</strong>\n\n'
                             f'‚öôÔ∏è <strong>ID:</strong> <code>{message.from_user.id}</code>\n'
                             f'üîí <strong>–¢–µ–ª–µ—Ñ–æ–Ω:</strong> <code>{phone}****</code>\n'
                             f'üóì <strong>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è:</strong> <code>{registration_date} ({days_count} {days})</code>\n\n'
                             f'üíµ <strong>–ú–æ–π –±–∞–ª–∞–Ω—Å: </strong><code>{balance}‚ÇΩ</code>\n'
                             f'üíé <strong>–ú–æ–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è: </strong><code>{volume}‚ÇΩ</code>',
                             parse_mode='HTML', reply_markup=account_keyboard)
    else:
        await confirm_phone(message)


@router.message(Command('balance'))
async def command_balance(message: Message):
    user_id = message.from_user.id
    user_data = users_data_dict.get(user_id)
    
    logger.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è –∫–æ–º–∞–Ω–¥–æ–π /balance.')
    
    if user_data['Is_verified']:
        await message.answer('<strong>–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—ã–π —Å–ø–æ—Å–æ–± –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞:</strong>', 
                             parse_mode='HTML', reply_markup=payment_keyboard)
    else:
        await confirm_phone(message)


@router.message(Command('crypto'))
async def command_crypto(message: Message, bot: Bot):
    user_id = message.from_user.id
    user_data = users_data_dict[user_id]
    
    logger.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è –∫–æ–º–∞–Ω–¥–æ–π /crypto.')
    
    call = CallbackQuery(id='fake_id', from_user=message.from_user,
                         message=message, chat_instance='')
    
    if user_data['Is_verified']:
        start = time.perf_counter()
        connection_await = await message.answer('üåê <strong>–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–ª–æ–∫—á–µ–π–Ω—É.</strong>\n'
                                                '<i>–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è...</i>', parse_mode='HTML')
        text = await main_page(call)
        await bot.delete_message(chat_id=message.chat.id, message_id=connection_await.message_id)
        await message.answer(text, parse_mode='HTML', reply_markup=crypto_keyboard,
                             disable_web_page_preview=True)
        end = time.perf_counter()
        logger.info(f'–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –±–ª–æ–∫—á–µ–π–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –∑–∞–Ω—è–ª–æ {end - start:.2f} —Å–µ–∫.')
    else:
        await confirm_phone(message)


@router.message(Command('start'))
async def start(message: Message):
    user_id = message.from_user.id
    
    logger.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è –∫–æ–º–∞–Ω–¥–æ–π /start.')
    
    if user_id not in users_data_dict:
        user = {'ID': user_id, 'Name': message.from_user.first_name,
                'Surname': message.from_user.last_name,
                'Username': message.from_user.username, 'Phone': None,
                'Is_verified': False, 'Registration': None, 'Balance': 0,
                'Funding_volume': 0}
        
        user_payments = {'ID': user_id,
                        'Transactions': {}}

        total_values['Total_users'] += 1
        await message.answer('<strong>–ü—Ä–∏–≤–µ—Ç! ü§ñ<strong>\n'
                             '–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –≤ –ø–µ—Ä–µ–≤–æ–¥–∞—Ö –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã, '
                             '–µ—Å–ª–∏ —É —Ç–µ–±—è –Ω–µ—Ç –ª–∏—á–Ω–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞ –∏–ª–∏ –±–∏—Ä–∂–∏.\n\n'
                             '<strong>–° –º–æ–µ–π –ø–æ–º–æ—â—å—é —Ç—ã —Å–º–æ–∂–µ—à—å:</strong>\n'
                             '<i>‚Ä¢ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ–π –Ω–∞ —Å–∞–π—Ç–µ\n'
                             '‚Ä¢ –°–¥–µ–ª–∞—Ç—å –ø–µ—Ä–µ–≤–æ–¥ –¥—Ä—É–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é\n'
                             '‚Ä¢ –û–ø–ª–∞—Ç–∏—Ç—å –∫—Ä–∏–ø—Ç–æ–π —Ç–æ–≤–∞—Ä—ã/—É—Å–ª—É–≥–∏</i>\n'
                             '–ò –Ω–µ —Ç–æ–ª—å–∫–æ!\n\n'
                             '–†–∞–∑–æ–±—Ä–∞—Ç—å—Å—è —Å –∫—Ä–∏–ø—Ç–æ–π —Å–º–æ–∂–µ—Ç –¥–∞–∂–µ —Ç–≤–æ—è –±–∞–±—É—à–∫–∞, '
                             '–≤ —ç—Ç–æ–º –Ω–µ—Ç –∞–±—Å–æ–ª—é—Ç–Ω–æ –Ω–∏—á–µ–≥–æ —Å–ª–æ–∂–Ω–æ–≥–æ. –ß–µ–≥–æ —Ç—ã –∂–¥–µ—à—å? '
                             '–î–∞–≤–∞–π –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è –ø–æ–±–ª–∏–∂–µ.')
        users_data.append(user)
        users_payments.append(user_payments)
        
        await save_data()
        await save_payments()
        await save_total()
        
        users_payments_dict[user_id] = user_payments
        users_data_dict[user_id] = user

    user_data = users_data_dict[user_id]

    if not user_data['Is_verified']:
        await confirm_phone(message)
    else:
        await command_menu(message)


@router.pre_checkout_query()
async def pre_checkout_query(pre_checkout_query: PreCheckoutQuery, bot: Bot):
    await bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True)


@router.message(F.successful_payment)
async def successful_payment(message: Message):
    user_id = message.from_user.id
    user_data = users_data_dict[user_id]
    user_payment = users_payments_dict[user_id]['Transactions']
    
    await message.answer('<strong>–û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–∞—è üéâ</strong>\n<i>–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: '
                         '–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–¥–Ω—É –∏ —Ç—É –∂–µ —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–≤–∞–∂–¥—ã, '
                         '–≤–∞—à–∞ –æ–ø–ª–∞—Ç–∞ –Ω–µ –±—É–¥–µ—Ç –∑–∞—Å—á–∏—Ç–∞–Ω–∞!</i>', parse_mode='HTML')
    
    if message.from_user.id in pending_payments:
        amount = pending_payments[user_id]
        trx_type = pending_payments_info[user_id]
        
        trx_id = await id_generator()
        
        total_values['Total_topups_count'] += 1
        total_values['Total_topups_volume'] += amount
        total_values['Total_transactions_count'] += 1
        trx_num = total_values['Total_transactions_count']
        
        user_data['Balance'] += amount
        user_data['Funding_volume'] += amount
        
        await save_total()
        await save_data()
        
        today, time_now = await get_time()
        if today not in user_payment:
            user_payment[today] = {time_now: {'RUB': amount,
                                              'USD': 0,
                                              'transaction_num': trx_num,
                                              'type': trx_type, 'trx_id': trx_id}}
            await save_payments()
        else:
            user_payment[today][time_now] = {'RUB': amount,
                                             'USD': 0, 
                                             'transaction_num': trx_num, 
                                             'type': trx_type, 'trx_id': trx_id}
            await save_payments()
        
        logger.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É—Å–ø–µ—à–Ω–æ –ø–æ–ø–æ–ª–Ω–∏–ª –±–∞–ª–∞–Ω—Å –Ω–∞ {amount}‚ÇΩ.')
        del pending_payments_info[user_id]
        del pending_payments[user_id]


@router.message(F.contact)
async def check_contact(message: Message):
    user_id = message.from_user.id

    if message.contact is not None and message.contact.user_id == user_id:
        user_data = users_data_dict[user_id]
        
        user_data['Phone'] = message.contact.phone_number
        user_data['Is_verified'] = True
        user_data['Registration'] = time.strftime('%d.%m.%Y')
        
        (user_data['Wallet_address'],
         user_data['Private_key']) = await create_new_wallet()
        
        total_values['Total_verified_users'] += 1
        
        await save_total()
        await save_data()
        
        remove_button = types.ReplyKeyboardRemove()
        await message.answer('<b>–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!</b> üéâ\n'
                             '–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º.', parse_mode='HTML',
                             reply_markup=remove_button)
        logger.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.')
        await command_menu(message)
    else:
        await confirm_phone(message)


@router.callback_query(lambda call: call.data.endswith('_fund'))
async def callback_fund_crypto(call: CallbackQueryHandler, state: FSMContext):
    await state.set_state(CryptoPayments.fund_wallet)
    
    user_id = call.from_user.id
    user_data = users_data_dict[user_id]
    balance_rub = user_data["Balance"]
    
    ok_to_fund[user_id] = False

    chain = str(call.data).split('_')[0]
    pending_chain_fund[user_id] = chain
    await call.message.edit_text(f'<strong>üíµ –ú–æ–π –±–∞–ª–∞–Ω—Å:</strong> <code>{balance_rub}‚ÇΩ</code>\n\n'
                                 f'<i>–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ, —á—Ç–æ –≤ –ª—é–±–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è –æ–ø–ª–∞—Ç—ã –∫–æ–º–∏—Å—Å–∏–π '
                                 f'—Å–µ—Ç–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–∞—Ç–∏–≤–Ω–∞—è –º–æ–Ω–µ—Ç–∞ —ç—Ç–æ–π —Å–µ—Ç–∏, –ø–æ—ç—Ç–æ–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ '
                                 f'–∫–æ—à–µ–ª—å–∫–∞ –≤ –±–æ—Ç–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Ç–æ–ª—å–∫–æ –≤ –Ω–∞—Ç–∏–≤–Ω—ã—Ö –º–æ–Ω–µ—Ç–∞—Ö. –î–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è '
                                 f'–≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤ —Ä—É–±–ª—è—Ö:</i>', parse_mode='HTML', reply_markup=back_to_chain_keyboard(chain))
    
    logger.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–±–∏—Ä–∞–µ—Ç —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –∫—Ä–∏–ø—Ç–æ–∫–æ—à–µ–ª—å–∫–∞.')


@router.message(CryptoPayments.fund_wallet)
async def fund_handler(message: Message, state: FSMContext):
    await fund(message, state)
    

@router.callback_query(lambda call: call.data.endswith('_withdraw'))
async def callback_withdraw_crypto(call: CallbackQueryHandler):
    user_id = call.from_user.id
    
    ok_to_withdraw[user_id] = False
    
    chain = str(call.data).split('_')[0]
    await call.message.edit_text('üí± <strong>–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–Ω–µ—Ç—É –¥–ª—è –≤—ã–≤–æ–¥–∞:</strong>',
                                 parse_mode='HTML', reply_markup=withdraw_crypto(chain))
    
    logger.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–±–∏—Ä–∞–µ—Ç –º–æ–Ω–µ—Ç—É –¥–ª—è –≤—ã–≤–æ–¥–∞ –∏–∑ –∫—Ä–∏–ø—Ç–æ–∫–æ—à–µ–ª—å–∫–∞.')


@router.callback_query(lambda call: call.data.startswith('withdraw_'))
async def callback_currency_withdraw(call: CallbackQueryHandler, state: FSMContext):
    await state.set_state(CryptoPayments.amount_to_withdraw)
    await withdraw_choice(call)


@router.callback_query(lambda call: 'percent' in call.data)
async def callback_currency_withdraw(call: CallbackQueryHandler, state: FSMContext):
    await buttons_withdraw_handler(call)
    await state.set_state(CryptoPayments.address_withdraw_to)
    

@router.message(CryptoPayments.amount_to_withdraw)
async def withdraw_amount(message: Message, state: FSMContext):
    await amount_to_withdraw(message, state)


@router.message(CryptoPayments.address_withdraw_to)
async def withdraw_handler(message: Message, state: FSMContext):
    await address_input(message, state)


@router.callback_query(lambda call: call.data.endswith('_swap'))
async def callback_swap_crypto(call: CallbackQueryHandler):
    user_id = call.from_user.id
    
    chain = str(call.data).split('_')[0]
    await call.message.edit_text('‚ö†Ô∏è –≠—Ç–æ—Ç —Ä–∞–∑–¥–µ–ª –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...', reply_markup=back_to_chain_keyboard(chain))

    logger.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤–æ—à–µ–ª –≤ —Å–≤–∞–ø.')


@router.callback_query(lambda call: call.data.endswith('_bridge'))
async def callback_bridge_crypto(call: CallbackQueryHandler):
    user_id = call.from_user.id
    
    chain = str(call.data).split('_')[0]
    await call.message.edit_text('‚ö†Ô∏è –≠—Ç–æ—Ç —Ä–∞–∑–¥–µ–ª –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...', reply_markup=back_to_chain_keyboard(chain))
    
    logger.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤–æ—à–µ–ª –≤ –±—Ä–∏–¥–∂.')



@router.callback_query()
async def callback_handler(call: CallbackQueryHandler, bot: Bot, state: FSMContext):
    await main_callbacks(call, bot, state)


@router.message(SendToFriend.amount_input)
async def amount_input_handler(message: Message, state: FSMContext):
    await amount_input(message, state)


@router.message(SendToFriend.id_input)
async def id_input_handler(message: Message, state: FSMContext):
    await id_input(message, state)


@router.message(SendToFriend.message_input)
async def message_input_handler(message: Message, state: FSMContext):
    await message_input(message, state)
    


@router.message(CustomPaymentState.waiting_for_custom_rub_amount)
async def process_custom_rub_amount(message: Message, bot: Bot, state: FSMContext):
    user_id = message.from_user.id
    user_input = message.text.replace(',', '.')
    try:
        amount = float(user_input)
        amount = int(amount)
        if amount >= 60:
            pending_payments[user_id] = amount
            pending_payments_info[user_id] = '–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ ‚Äî –ÆKassa'
            await message.delete()
            await rub_custom(message, bot, state)
        else:
            await message.delete()
            await message.answer('<strong>–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—ã–π —Å–ø–æ—Å–æ–± –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞:</strong>',
                                 parse_mode='HTML', reply_markup=payment_keyboard)
    except ValueError:
        await message.delete()
        await message.answer('<strong>–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—ã–π —Å–ø–æ—Å–æ–± –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞:</strong>',
                                     parse_mode='HTML', reply_markup=payment_keyboard)
    await state.clear()


@router.message(CustomPaymentState.waiting_for_custom_stars_amount)
async def process_custom_stars_amount(message: Message, bot: Bot, state: FSMContext):
    user_id = message.from_user.id
    user_input = message.text.replace(',', '.')
    try:
        amount = float(user_input)
        amount = int(amount)
        if amount > 0:
            pending_payments[user_id] = amount
            pending_payments_info[user_id] = '–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ ‚Äî Stars'
            await message.delete()
            await stars_custom(message, bot, state)
        else:
            await message.delete()
            await message.answer('<strong>–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—ã–π —Å–ø–æ—Å–æ–± –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞:</strong>',
                                 parse_mode='HTML', reply_markup=payment_keyboard)
    except ValueError:
        await message.delete()
        await message.answer('<strong>–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—ã–π —Å–ø–æ—Å–æ–± –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞:</strong>',
                                     parse_mode='HTML', reply_markup=payment_keyboard)
    await state.clear()


@router.message()
async def any_message(message: Message, state: FSMContext):
    await command_menu(message)
    await state.clear()


@router.message()
async def confirm_phone(message: Message):
    user_id = message.from_user.id
    user_data = users_data_dict[user_id]

    if not user_data['Is_verified']:
        button_phone = [
            [KeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", request_contact=True)]
            ]
        markup = ReplyKeyboardMarkup(keyboard=button_phone, resize_keyboard=True)
        await message.answer('‚òéÔ∏è <b>–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω</b>\n\n'
                             '–í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å <b>–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞</b>'
                             ' –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º.\n\n'
                             '–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.',
                             parse_mode='HTML', reply_markup=markup)
    else:
        return
