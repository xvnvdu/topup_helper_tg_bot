from typing import Any
from crypto.models import Currencies
from aiogram.types import CallbackQuery
from bot.main_bot import users_payments_dict
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton


''' –ö–ù–û–ü–ö–ò –†–ê–ó–î–ï–õ–ê –ú–ï–ù–Æ '''

menu_buttons = [
    [InlineKeyboardButton(text='üë®‚Äçüíª –ú–æ–π –∞–∫–∫–∞—É–Ω—Ç', callback_data='account'),
     InlineKeyboardButton(text='üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å', callback_data='topup')],
    [InlineKeyboardButton(text='üëõ –ö—Ä–∏–ø—Ç–æ–∫–æ—à–µ–ª–µ–∫', callback_data='crypto')]
        ]
menu_keyboard = InlineKeyboardMarkup(inline_keyboard=menu_buttons)


''' –ö–ù–û–ü–ö–ò –†–ê–ó–î–ï–õ–ê –ê–ö–ö–ê–£–ù–¢ '''

account_buttons = [
    [InlineKeyboardButton(text='üìù –ú–æ–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏', callback_data='transactions'),
    InlineKeyboardButton(text='üôã‚Äç‚ôÇÔ∏è –ü–µ—Ä–µ–≤–æ–¥ –¥—Ä—É–≥—É', callback_data='send')],
    [InlineKeyboardButton(text='üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞', callback_data='support')],
    [InlineKeyboardButton(text='‚Üê –ù–∞–∑–∞–¥', callback_data='back')]
]
account_keyboard = InlineKeyboardMarkup(inline_keyboard=account_buttons)

back_to_account = [
    [InlineKeyboardButton(text='‚Üê –ù–∞–∑–∞–¥', callback_data='account')]
]
back_to_account_keyboard = InlineKeyboardMarkup(inline_keyboard=back_to_account)


''' –ö–ù–û–ü–ö–ò –†–ê–ó–î–ï–õ–ê –ü–û–î–î–ï–†–ñ–ö–ò '''

back_to_support_keyboard = InlineKeyboardMarkup(
    inline_keyboard=[[InlineKeyboardButton(text='‚Üê –ù–∞–∑–∞–¥', callback_data='support')]],
)

support_keyboard = InlineKeyboardMarkup(
    inline_keyboard=[[InlineKeyboardButton(text='üì¢ –ù–∞–ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É', callback_data='message_to_support')],
                     [InlineKeyboardButton(text='‚≠ïÔ∏è –ü—Ä–∞–≤–∏–ª–∞ –∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –æ–±—Ä–∞—â–µ–Ω—è–º', callback_data='support_rules')],
                     [InlineKeyboardButton(text='‚Üê –ù–∞–∑–∞–¥', callback_data='account')]]
)

def answer_message_keyboard(user_id, number, today, time_now) -> Any:
    return InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text='–û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ', callback_data=f'answer_message_{user_id}_{number}_{today}_{time_now}')]],
    )

def cancel_answer_keyboard(user_id, number, today, time_now) -> Any:
    return InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text='–ù–µ –æ—Ç–≤–µ—á–∞—Ç—å', callback_data=f'cancel_answer_{user_id}_{number}_{today}_{time_now}')]],
    )

def continue_application_keyboard(user_id, number, today, time_now) -> Any:
    return InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text='–û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ', callback_data=f'continue_application_{user_id}_{number}_{today}_{time_now}')]],
    )

def cancel_application_keyboard(user_id, number, today, time_now) -> Any:
    return InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text='–ù–µ –æ—Ç–≤–µ—á–∞—Ç—å', callback_data=f'cancel_application_{user_id}_{number}_{today}_{time_now}')]],
        )


''' –ö–ù–û–ü–ö–ò –†–ê–ó–î–ï–õ–ê –ü–ï–†–ï–í–û–î–ê –ë–ê–õ–ê–ù–°–ê '''

try_again_amount_keyboard = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text='üôã‚Äç‚ôÇÔ∏è –ü–µ—Ä–µ–≤–æ–¥ –¥—Ä—É–≥—É', callback_data='send')]]
    )

try_again_id_keyboard = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text='ü•∑ –í–≤–µ—Å—Ç–∏ ID', callback_data='choose_id')]]
    )

try_again_message_keyboard = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text='‚úâÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ', callback_data='message_input')]]
    )

step_back_keyboard = InlineKeyboardMarkup(
    inline_keyboard=[[InlineKeyboardButton(text='‚Üê –ò–∑–º–µ–Ω–∏—Ç—å —Å—É–º–º—É', callback_data='send')]]
)

confirm_sending_keyboard = InlineKeyboardMarkup(
    inline_keyboard=[[InlineKeyboardButton(text='‚ùå –ù–µ—Ç', callback_data='send'),
                      InlineKeyboardButton(text='‚úÖ –î–∞', callback_data='sending_confirmed')]]
)

skip_message_keyboard = InlineKeyboardMarkup(
    inline_keyboard=[[InlineKeyboardButton(text='–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å ‚Üí', callback_data='confirm_sending')]]
)


''' –ö–ù–û–ü–ö–ò –ñ–£–†–ù–ê–õ–ê –¢–†–ê–ù–ó–ê–ö–¶–ò–ô '''

zero_transactions_buttons = [
    [InlineKeyboardButton(text='ü§ë –ü–µ—Ä–µ–π—Ç–∏ –∫ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—é', callback_data='topup')],
    [InlineKeyboardButton(text='‚Üê –ù–∞–∑–∞–¥', callback_data='account')]
]
zero_transactions_keyboard = InlineKeyboardMarkup(inline_keyboard=zero_transactions_buttons)

async def log_buttons(call: CallbackQuery, page_text, current_page: int, total_pages: int):
    trx_log_buttons = [[InlineKeyboardButton(text='‚Üê –ù–∞–∑–∞–¥', callback_data='account')]]
    if current_page == 0 and total_pages > 1:
        trx_log_buttons = [
            [InlineKeyboardButton(text=' ', callback_data='None'),
            InlineKeyboardButton(text='>', callback_data='next_page')],
            [InlineKeyboardButton(text='‚Üê –ù–∞–∑–∞–¥', callback_data='account')]
        ]
    elif 0 < current_page < total_pages - 1:
        trx_log_buttons = [
            [InlineKeyboardButton(text='<', callback_data='prev_page'),
             InlineKeyboardButton(text='>', callback_data='next_page')],
            [InlineKeyboardButton(text='‚Üê –ù–∞–∑–∞–¥', callback_data='account')]
        ]
    elif total_pages == 1:
        trx_log_buttons = [
            [InlineKeyboardButton(text='‚Üê –ù–∞–∑–∞–¥', callback_data='account')]
        ]
    elif current_page == total_pages - 1:
        trx_log_buttons = [
            [InlineKeyboardButton(text='<', callback_data='prev_page'),
            InlineKeyboardButton(text=' ', callback_data='None')],
            [InlineKeyboardButton(text='‚Üê –ù–∞–∑–∞–¥', callback_data='account')]
        ]

    trx_log_keyboard = InlineKeyboardMarkup(inline_keyboard=trx_log_buttons)
    await call.message.edit_text(text=page_text, parse_mode='HTML', reply_markup=trx_log_keyboard, disable_web_page_preview=True)


''' –ö–ù–û–ü–ö–ò –†–ê–ó–î–ï–õ–ê –ü–û–ü–û–õ–ù–ï–ù–ò–ï –ë–ê–õ–ê–ù–°–ê '''

payment_buttons = [
    [InlineKeyboardButton(text='üü£ –ÆKassa', callback_data='YK')],
    [InlineKeyboardButton(text='‚≠êÔ∏è Telegram Stars', callback_data='stars')],
    [InlineKeyboardButton(text='‚Üê –ù–∞–∑–∞–¥', callback_data='back')]
        ]
payment_keyboard = InlineKeyboardMarkup(inline_keyboard=payment_buttons)

stars_buttons = [
        [InlineKeyboardButton(text='100‚ÇΩ (67 ‚≠êÔ∏è)', callback_data='100_in_stars'),
         InlineKeyboardButton(text='200‚ÇΩ (134 ‚≠êÔ∏è)', callback_data='200_in_stars')],
        [InlineKeyboardButton(text='400‚ÇΩ (267 ‚≠êÔ∏è)', callback_data='400_in_stars'),
         InlineKeyboardButton(text='500‚ÇΩ (334 ‚≠êÔ∏è)', callback_data='500_in_stars')],
        [InlineKeyboardButton(text='‚Üê –ù–∞–∑–∞–¥', callback_data='topup')]
    ]
stars_keyboard = InlineKeyboardMarkup(inline_keyboard=stars_buttons)

yk_payment_buttons = [
        [InlineKeyboardButton(text='100‚ÇΩ üíµ', callback_data='100_in_rub'),
         InlineKeyboardButton(text='200‚ÇΩ üíµ', callback_data='200_in_rub')],
        [InlineKeyboardButton(text='400‚ÇΩ üíµ', callback_data='400_in_rub'),
         InlineKeyboardButton(text='500‚ÇΩ üíµ', callback_data='500_in_rub')],
        [InlineKeyboardButton(text='‚Üê –ù–∞–∑–∞–¥', callback_data='topup')]
    ]
yk_payment_keyboard = InlineKeyboardMarkup(inline_keyboard=yk_payment_buttons)


''' –ö–ù–û–ü–ö–ò –†–ê–ó–î–ï–õ–ê –ö–†–ò–ü–¢–û–ö–û–®–ï–õ–ï–ö '''

crypto_buttons = [
    [InlineKeyboardButton(text='üü£ Polygon', callback_data='Polygon'),
    InlineKeyboardButton(text='üîµ Base', callback_data='Base')],
    [InlineKeyboardButton(text='üî¥ Optimism', callback_data='Optimism'),
    InlineKeyboardButton(text='‚ö™Ô∏è Arbitrum', callback_data='Arbitrum')],
    [InlineKeyboardButton(text='‚Üê –ù–∞–∑–∞–¥', callback_data='back')]
]
crypto_keyboard = InlineKeyboardMarkup(inline_keyboard=crypto_buttons)

def chains_keyboard(chain) -> Any:
    chains_buttons = [
        [InlineKeyboardButton(text='üìà –í–Ω–µ—Å—Ç–∏', callback_data=f'{chain}_fund'),
        InlineKeyboardButton(text='üìâ –í—ã–≤–µ—Å—Ç–∏', callback_data=f'{chain}_withdraw')],
        [InlineKeyboardButton(text='üîÑ –û–±–º–µ–Ω', callback_data=f'{chain}_swap'),
        InlineKeyboardButton(text='üîÄ –ú–æ—Å—Ç', callback_data=f'{chain}_bridge')],
        [InlineKeyboardButton(text='‚Üê –ù–∞–∑–∞–¥', callback_data='crypto')]
    ]
    return InlineKeyboardMarkup(inline_keyboard=chains_buttons)

def back_to_chain_keyboard(chain) -> Any:
    return InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text='‚Üê –ù–∞–∑–∞–¥', callback_data=f'{chain}')]]
    )
    
def try_again_crypto_amount_keyboard(chain) -> Any:
    return InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text='üìà –í–Ω–µ—Å—Ç–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞', callback_data=f'{chain}_fund')]]
    )

def confirm_fund_wallet(chain, trx_id) -> Any:
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text='‚ùå –ù–µ—Ç', callback_data=f'{chain}_fund'),
            InlineKeyboardButton(text='‚úÖ –î–∞', callback_data=f'confirm_funding_id_{trx_id}')]
        ]
    )

def successful_wallet_fund(exp_link, explorer, trx_hash) -> Any:
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=f'üåê –°–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ {explorer}', url=f'{exp_link}/tx/{trx_hash}')]
        ]
    )

def withdraw_crypto(chain) -> Any:
    withdraw_buttons_list = []
    
    for cur in Currencies.currencies[chain]:
        withdraw_buttons_list.append(InlineKeyboardButton(text=f'{cur}', callback_data=f'withdraw_{chain}_{cur}'))

    if len(Currencies.currencies[chain]) % 2 != 0:
        withdraw_buttons = []
        index = 0
        withdraw_buttons.append([withdraw_buttons_list[index]])
        for i in range(int((len(Currencies.currencies[chain]) - 1) / 2)):
            index += 1
            withdraw_buttons.append([withdraw_buttons_list[index], withdraw_buttons_list[index+1]])
            index += 1
    else:
        withdraw_buttons = []
        index = 0
        for i in range(int((len(Currencies.currencies[chain])) / 2)):
            withdraw_buttons.append([withdraw_buttons_list[index], withdraw_buttons_list[index+1]])
            index += 2
        
    withdraw_buttons.append([InlineKeyboardButton(text='‚Üê –ù–∞–∑–∞–¥', callback_data=f'{chain}')])
    
    return InlineKeyboardMarkup(inline_keyboard=withdraw_buttons)

def crypto_amount_to_withdraw(chain: str, coin: str):
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text='25%', callback_data=f'25_percent_withdraw_{chain}_{coin}'),
             InlineKeyboardButton(text='50%', callback_data=f'50_percent_withdraw_{chain}_{coin}')],
            [InlineKeyboardButton(text='75%', callback_data=f'75_percent_withdraw_{chain}_{coin}'),
             InlineKeyboardButton(text='100%', callback_data=f'100_percent_withdraw_{chain}_{coin}')],
            [InlineKeyboardButton(text='‚Üê –ù–∞–∑–∞–¥', callback_data=f'{chain}_withdraw')]
        ]
    )

def try_again_withdraw_amount(chain, currency) -> Any:
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text='‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Å—É–º–º—É', callback_data=f'withdraw_{chain}_{currency}')]
        ]
    )

def change_withdraw_amount(chain, currency) -> Any:
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text='–ò–∑–º–µ–Ω–∏—Ç—å —Å—É–º–º—É –≤—ã–≤–æ–¥–∞', callback_data=f'withdraw_{chain}_{currency}')]
        ]
    )

try_again_address_input_keyboard = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text='‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∞–¥—Ä–µ—Å', callback_data=f'change_withdraw_address')]
    ]
)

def confirm_withdrawal(trx_id: str):
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text='‚ùå –ù–µ—Ç', callback_data='change_withdraw_address'),
            InlineKeyboardButton(text='‚úÖ –î–∞', callback_data=f'withdrawal_confirmed_id_{trx_id}')]
        ]
    )

def successful_wallet_withdrawal(exp_link: str, explorer: str, trx_hash: str):
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=f'üåê –°–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ {explorer}', url=f'{exp_link}/tx/{trx_hash}')]
        ]
    )

def swap_choice_keyboard(chain: str):
    swap_buttons_list = []

    for cur in Currencies.currencies[chain]:
        swap_buttons_list.append(InlineKeyboardButton(text=f'{cur}', callback_data=f'swap_{chain}_{cur}'))
    
    if len(Currencies.currencies[chain]) % 2 != 0:
        swap_buttons = []
        index = 0
        swap_buttons.append([swap_buttons_list[index]])
        for i in range(int((len(Currencies.currencies[chain]) - 1) / 2)):
            index += 1
            swap_buttons.append([swap_buttons_list[index], swap_buttons_list[index+1]])
            index += 1
    else:
        swap_buttons = []
        index = 0
        for i in range(int((len(Currencies.currencies[chain])) / 2)):
            swap_buttons.append([swap_buttons_list[index], swap_buttons_list[index+1]])
            index += 2
    
    swap_buttons.append([InlineKeyboardButton(text='‚Üê –ù–∞–∑–∞–¥', callback_data=f'{chain}')])
    
    return InlineKeyboardMarkup(inline_keyboard=swap_buttons)


def swap_second_choice_keyboard(chain: str, currency: str):
    swap_buttons_list = []
    
    for cur in Currencies.currencies[chain]:
        if cur != currency:
            swap_buttons_list.append(
                InlineKeyboardButton(text=f'{cur}', callback_data=f'proceed_swap_{chain}_{currency}_{cur}')
            )
    
    if (len(Currencies.currencies[chain]) - 1) % 2 != 0:
        swap_buttons = []
        index = 0
        swap_buttons.append([swap_buttons_list[index]])
        for i in range(int((len(Currencies.currencies[chain]) - 1) / 2)):
            index += 1
            swap_buttons.append([swap_buttons_list[index], swap_buttons_list[index+1]])
            index += 1
    else:
        swap_buttons = []
        index = 0
        for i in range(int((len(Currencies.currencies[chain])) / 2)):
            swap_buttons.append([swap_buttons_list[index], swap_buttons_list[index+1]])
            index += 2
    
    swap_buttons.append([InlineKeyboardButton(text='‚Üê –ù–∞–∑–∞–¥', callback_data=f'{chain}_swap')])
    
    return InlineKeyboardMarkup(inline_keyboard=swap_buttons)
    
    
def crypto_amount_swap(chain: str, cur1: str, cur2: str):
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text='25%', callback_data=f'25_percent_swap_{chain}_{cur1}_{cur2}'),
             InlineKeyboardButton(text='50%', callback_data=f'50_percent_swap_{chain}_{cur1}_{cur2}')],
            [InlineKeyboardButton(text='75%', callback_data=f'75_percent_swap_{chain}_{cur1}_{cur2}'),
             InlineKeyboardButton(text='100%', callback_data=f'100_percent_swap_{chain}_{cur1}_{cur2}')],
            [InlineKeyboardButton(text='‚Üê –ù–∞–∑–∞–¥', callback_data=f'swap_{chain}_{cur1}')]
        ]
    )
    
def change_swap_amount(chain: str, cur1: str, cur2: str):
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text='‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Å—É–º–º—É —Å–≤–∞–ø–∞', callback_data=f'proceed_swap_{chain}_{cur1}_{cur2}')]
        ]
    )
    
def confirm_swap_keyboard(trx_id: str, chain: str, cur1: str, cur2: str):
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text='‚ùå –ù–µ—Ç', callback_data=f'proceed_swap_{chain}_{cur1}_{cur2}'),
            InlineKeyboardButton(text='‚úÖ –î–∞', callback_data=f'confirmed_swap_id_{trx_id}')]
        ]
    )
    
def allowance_handler_keyboard(chain: str, cur1: str, cur2: str):
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text='‚ùå –ù–µ—Ç', callback_data=f'proceed_swap_{chain}_{cur1}_{cur2}'),
            InlineKeyboardButton(text='‚úÖ –î–∞', callback_data=f'approve_allowance')]
        ]
    )

def successful_approve(exp_link: str, explorer: str, trx_hash: str | None, active_button: bool, today: str, time_now: str):
    keyboard = [
            [InlineKeyboardButton(text=f'üåê –°–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ {explorer}', url=f'{exp_link}/tx/{trx_hash}')]
        ]
    if active_button:
        keyboard.append([InlineKeyboardButton(text=f'üîÑ –ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–±–º–µ–Ω—É', callback_data=f'go_to_swap_{today}_{time_now}')])
        
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def successful_swap(explorer: str, exp_link: str, trx_hash: str):
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=f'üåê –°–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ {explorer}', url=f'{exp_link}/tx/{trx_hash}')]
        ]
    )
    